'''
[ 문제 ] : 특정 거리의 도시 찾기
어떤 나라에는 1 ~ N번까지의 도시와 M개의 단방향 도로가 존재합니다.
모든 도로의 거리는 1입니다. 이때 특정한 도시 X로부터 출발하여 도달할 수 있는 모든 도시 중에서,
최단 거리가 정확히 K인 모든 도시의 번호를 출력하는 프로그램을 작성하세요.
또한 출발 도시 X에서 출발 도시 X로 가는 최단 거리는 항상 0이라고 가정합니다.
예를 들어 N=4, K=2, X=1일 때 다음과 같이 그래프가 구성되어 있다고 가정하자.
이 때 1번 도시에서 출발하여 도달할 수 있는 도시 중에서, 최단 거리가 2인 도시는 4번 도시 뿐이다. 2번과 3번 도시의 경우, 최단 거리가 1이기 때문에 출력하지 않는다.

[ 예시 ]
1) 입력 조건
- 첫째 줄에 도시의 개수 N, 도로의 개수 M, 거리 정보 K, 출발 도시의 번호 X가 주어진다. (2 ≤ N ≤ 300,000, 1 ≤ M ≤ 1,000,000, 1 ≤ K ≤ 300,000, 1 ≤ X ≤ N)
- 둘째 줄부터 M개의 줄에 걸쳐서 두 개의 자연수 A, B가 공백을 기준으로 구분되어 주어진다. 이는 A번 도시에서 B번 도시로 이동하는 단방향 도로가 존재한다는 의미다. (1 ≤ A, B ≤ N) 단, A와 B는 서로 다른 자연수이다.

2) 출력 조건
- X로부터 출발하여 도달할 수 있는 도시 중에서, 최단 거리가 K인 모든 도시의 번호를 한 줄에 하나씩 오름차순으로 출력한다.
- 이 때 도달할 수 있는 도시 중에서, 최단 거리가 K인 도시가 하나도 존재하지 않으면 -1을 출력한다.

3) 입력 예시
4 4 2 1
1 2
1 3
2 3
2 4

4) 출력 예시
4

[ 문제 접근 방식 ]
- 최단 경로를 구하는 문제이고 간선의 길이가 1로 고정되어 있음으로 BFS 탐색을 사용하였다.
- X 도시와 연결되어 있는 모든 노드를 탐색하여 연결되어 있는 모든 노드까지 도달하는데 걸리는 거리를 구한다.
- 구한 거리정보들 중에서 K와 일치하는 노드를 출력한다.
- 일치하는 노드가 없을 경우 -1을 출력한다.

[시간 복잡도] O(N+M)
노드의 개수 N은 최대 300,000개이며 간선의 개수 M은 최대 1,000,000개 임으로 BFS 탐색으로 풀이 구현 가능
'''
from collections import deque

# 도시의 개수: n, 도로의 개수: m, 거리 정보: k, 출발 도시 번호(x): 1
n, m, k, x = map(int, input().split())
graph = [[] for _ in range(n + 1)]  # n+1 개의 row 생성 idx 맞추기 위해서 n+1 개 생성

# 모든 도로 정보 입력 받기
for _ in range(m):
    a, b = map(int, input().split())
    graph[a].append(b)

print(graph)

# 모든 도시에 대한 최단 거리 초기화
distance = [-1] * (n + 1)
distance[x] = 0 # 출발 도시까지의 거리는 0으로 설정

# 너비 우선 탐색(BFS) 수행
q = deque([x])
while q:
    now = q.popleft()
    # 현재 도시에서 이동할 수 있는 모든 도시를 확인
    for next_node in graph[now]:
        # 아직 방문하지 않은 도시라면
        if distance[next_node] == -1:
            # 최단 거리 갱신
            distance[next_node] = distance[now] + 1
            q.append(next_node)

# 최단 거리가 K인 모든 도시의 번호를 오름차순으로 출력
check = False
for i in range(1, n + 1):
    if distance[i] == k:
        print(i)
        check = True

# 만약 최단 거리가 K인 도시가 없다면, -1 출력
if check == False:
    print(-1)
