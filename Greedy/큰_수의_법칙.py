'''
[ 문제 ] : 3-2 큰 수의 법칙
큰 수의 법칙은 다양한 수로 이루어진 배열이 있을 때 주어진 수들을 M번 더하여 가장 큰 수를 만드는 법칙이다.
단, 배열의 특정한 인덱스(번호)에 해당하는 수가 연속해서 K번을 초과하여 더해질 수 없는 것이 법칙의 특징이다.

[ 예시 ]
1) 입력 조건
- 첫째 줄에 N(2<=N<=1000), M(1<=M<=1000), K(1<=K<=10000)의 자연수가 주어지며, 각 자연수는 공백으로 구분한다.
- 둘째 줄에 N개의 자연수가 주어진다. 각 자연수는 공백으로 구분한다. 단, 각각의 자연수는 1 이상 10000 이하의 수로 주어진다.
- 입력으로 주어지는 K는 항상 M보다 작거나 같다.

2) 출력 조건
- 첫째 줄에 동빈이의 큰 수의 법칙에 따라 더해진 답을 출력한다.

3) 입력 예시
5 8 3
2 4 5 4 6

4) 출력 예시
46

[ 문제 접근 방식 ]
조건 1) 큰 수의 법칙을 충족 한다.
-> 입력된 자연수를 큰 순서대로 정렬한다.
-> 큰 순서의 자연수를 최대한 많이 활용하여 M번 더했을 때 가장 큰 수를 만든다.
-> 특정한 인덱스에 해당하는 수가 K번 연속으로만 더해질 수 있다.
-> 따라서 첫 번째로 큰수를 K번 더하고 두 번째 큰수를 한 번 더하고, 다시 첫번째로 클수를 K번 더하는 식으로 반복하며 가장 큰 수를 구하면 된다.

[ 시간복잡도 ]
O(M)

[ 개념 ]
1. range()
- range(start, end, step)
    - start : start로 시작되는 숫자부터 리턴.
    - end : end가 포함되지 않는 숫자까지 리턴.
    - step : 연속적인 숫자들 중에, step의 간격에 해당되는 숫자들만 리턴.
- range(5) : 0부터 시작하고, 5를 포함하지 않는 숫자들이 리턴
- range(1, 5) : 1부터 시작하고, 5를 포함하지 않는 숫자들이 리턴
- range(1, 10, 2) :  1을 포함하고 10을 포함하지 않는 숫자들 중에, 2의 간격에 해당하는 숫자들이 리턴

2. sort()
- 오름차순 : sort(), sort(reverse=False)
- 내림차순 : sort(reverse=True)
- 참고
    - 새로운 정렬된 리스트를 반환하는 함수는 sorted 함수
    - 리스트 자체를 정렬하는 것은 sort 함수.
'''

# N, M, K를 공백으로 구분하여 입력
N, M, K = map(int, input().split())
# N개의 수를 공백으로 구분하여 입력
data = list(map(int, input().split()))

# 더한 숫자 개수
count = 0
# 큰 수의 법칙으로 찾은 결과값(가장 큰 수)
result = 0

# 입력 받은 수를 내림차순으로 정렬(큰 순서대로 정렬)
data.sort(reverse=True)
# 첫 번째로 큰 수와 두 번째로 큰 수를 담을 임시 변수
tmp = data[0]

# 원하는 조건(큰 수의 법칙이 완료)이 종료될 때까지 무한 반복
while True:
    for i in range(K):
        # 더한 숫자의 개수가 M개일 경우 계산 로직 종료
        if count == M:
            break
        # 두 번째로 큰수를 더하는 경우에는 한 번만 더하기
        elif tmp == data[1]:
            result += tmp
            count += 1
            break;
        # 첫 번째로 큰수를 더하는 경우에는 K번 더하기
        else:
            result += tmp
            count += 1
    # 더한 숫자의 개수가 M개일 경우 계산 로직 종료
    if count == M:
        break;
    # 임시 변수에 첫 번째로 큰수가 있을 경우 두 번째로 큰 수로 변환
    elif tmp == data[0]:
        tmp = data[1]
    # 임시 변수에 두 번째로 큰수가 있을 경우 첫 번째로 큰 수로 변환
    else:
        tmp = data[0]

print(result)

'''
이 문제 조건은 M <= 10000 이하임으로 O(M)의 시간복잡도를 가진 위의 코드로 시간초과가 나진 않지만,
M의 크기가 100억 이상처럼 커진다면 스간 초과 판정을 받을 것이다.
따라서 수열을 이용하여 O(1)으로 시간 복잡도를 줄여보자.

# [ 수열을 이용하여 계산 : int( M / ( K + 1 ) ) * K + M % ( K + 1 )]
# N, M, K를 공백을 기준으로 구분하여 입력 받기
n, m, k = map(int, input().split())
# N개의 수를 공백을 기준으로 구분하여 입력 받기
data = list(map(int, input().split()))

data.sort() # 입력 받은 수들 정렬하기
first = data[n - 1] # 가장 큰 수
second = data[n - 2] # 두 번째로 큰 수

# 가장 큰 수가 더해지는 횟수 계산
count = int(m / (k + 1)) * k
count += m % (k + 1)

result = 0
result += (count) * first # 가장 큰 수 더하기
result += (m - count) * second # 두 번째로 큰 수 더하기

print(result) # 최종 답안 출력
'''


