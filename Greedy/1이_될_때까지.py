'''
[ 문제 ] : 3-4 1이 될 때까지
어떠한 수 N이 1이 될 때까지 다음의 두 과정 중 하나를 반복적으로 선택하여 수행하려고 한다.
단, 두 번째 연산은 N이 K로 나누어떨어질 때만 선택할 수 있다.

1. N에서 1을 뺀다.
2. N을 K로 나눈다.

1번 혹은 2번의 과정을 수행해야 하는 최소 횟수를 구해라

[ 예시 ]
1) 입력 조건
- 첫째 줄에 N(2<=N<=100000)과 K(2<=K<=100000)가 공백으로 구분되며 각각 자연수로 주어진다.
  이때 입력으로 주어지는 N은 항상 K보다 크거나 같다.

2) 출력 조건
- 첫째 줄에 N이 1이 될 때까지 1번 혹은 2번의 과정을 수행해야 하는 횟수의 최솟값을 출력한다.

3) 입력 예시
25 5

4) 출력 예시
2

[ 문제 접근 방식 ]
1) 2번째 연산은 N이 K로 나누어 떨어질 때만 선택할 수 있으므로 1번 연산 수행시 N % K == 0일 때만 수행하도록 조건을 추가한다.
2) 계속해서 계산을 하다보면 N < K 작아지는 순간이 오는데, 그땐 1번 과정만 수행한다.

[ 시간복잡도 ]
O(N)

'''
N, K = map(int, input().split())
count = 0
while N >= K:
    while N % K != 0:
        N -= 1
        count += 1
    N //= K
    count += 1

while N > 1:
    N -= 1
    count += 1

print(count)